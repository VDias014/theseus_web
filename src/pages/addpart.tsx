import React, { useState } from 'react';
import { Box, Heading, Text, Button, Container, Stack, Icon } from '@chakra-ui/react';
import { ChevronLeftIcon, DeleteIcon, EditIcon, CheckIcon } from '@chakra-ui/icons';
import { useDropzone } from 'react-dropzone';
import Head from "next/head";

const questions = [
  { id: 1, question: 'O que você quer cadastrar?', options: [] },
  { id: 2, question: 'Indique o componente que deseja cadastrar', options: [] },
  { id: 3, question: 'Qual é a condição do componente?', options: [] },
  { id: 4, question: 'Adicione uma descrição do estado ou comentários em geral', options: [] },
  { id: 5, question: 'Adicione fotos do componente', options: [] },
  { id: 6, question: 'Visualize e interaja com as imagens', options: [] },
  { id: 7, question: 'Confira as informações', options: [] }, // Nova pergunta para verificar as informações
];

const Questionnaire = () => {
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [answers, setAnswers] = useState({});
  const [isComplete, setIsComplete] = useState(false);
  const isFirstQuestion = currentQuestionIndex === 0;
  const [subject, setSubject] = useState('');
  const [message, setMessage] = useState('');
  //@ts-ignore
  const { acceptedFiles, getRootProps, getInputProps } = useDropzone({ accept: 'image/*', multiple: true });
  const handleAnswer = (answer: string | File[]) => {
    setAnswers({ ...answers, [currentQuestionIndex]: answer });
    if (currentQuestionIndex < questions.length - 1) {
      setCurrentQuestionIndex(currentQuestionIndex + 1);
    } else {
      setIsComplete(true);
    }
  };
  

  const handleBack = () => {
    if (currentQuestionIndex > 0) {
      setCurrentQuestionIndex(currentQuestionIndex - 1);
    }
  };

  const [selectedImageIndex, setSelectedImageIndex] = useState(null);

  const handleImageClick = (index: any) => {
    setSelectedImageIndex(index);
  };

  const handleBackToIndex = () => {
    // Redirecione para a página inicial (index.tsx)
    window.location.href = '/';
  };

  const handleDeleteImage = (index: any) => {
    const updatedImages = acceptedFiles.filter((_, i) => i !== index);
    const updatedAnswers = { ...answers, [currentQuestionIndex]: updatedImages };
    setAnswers(updatedAnswers);
  };

  const handleEditImage = (index: any) => {
    // Lógica para editar a imagem (recortar, por exemplo)
    console.log(`Editar imagem ${index}`);
  };
  
  const sendMail = async () => {
    try {
      const requestData = {
        title: 'Novo Registro de Peça!',
        message: 'Informações preenchidas no questionário',
        componentName: answers[1] || '',
        componentType: answers[0] || '',
        componentCondition: answers[2] || '',
        componentDescription: answers[3] || '',
        acceptedFiles: acceptedFiles.map(file => ({
          filename: file.name,
          //@ts-ignore
          base64: file.base64, // Usar 'base64' em vez de 'path'
          //@ts-ignore
          cid: file.name // Alterado para nome do arquivo
        }))
      };

      const response = await fetch('/api/emailSender', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(requestData)
      });

      console.log(await response.json());
      setIsComplete(true);
    } catch (error) {
      console.error('Falha ao enviar o email:', error);
    }
  };

  const handleFinishQuestionnaire = () => {
    // Implemente a lógica para concluir o questionário
    // Isso pode incluir o redirecionamento para outra página ou a execução de outras ações necessárias
    console.log('Questionário concluído!');
  };

  return (
    <>
      <Head>
        <title>Novas Peças - Theseus</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Box bg="#FCF5EB" minH="100vh" display="flex" flexDirection="column" alignItems="center" justifyContent="center">
        {/* Botão ou ícone no canto superior esquerdo */}
        <Button
          onClick={handleBackToIndex}
          position="fixed"
          left="1rem"
          top="1rem"
          bg="transparent"
          _hover={{ bg: 'transparent' }}
          _active={{ bg: 'transparent' }}
        >
          <Icon as={ChevronLeftIcon} boxSize={6} />
        </Button>
        <Container p={8} maxW="xl" borderRadius={8}>
          {isComplete ? (
            <Stack spacing={4}>
              <CheckIcon fontSize={120} ml={'auto'} mr={'auto'}/>
              <Heading textAlign="center" color={'green.900'}>Tudo certo, recebemos seu cadastro!</Heading>
              <Text textAlign={'center'} color={'green.900'}>Em breve a equipe Theseus entrará em contato para fornecer mais informações sobre os próximos passos.</Text>
              <Button bg={'green.900'} color={'white'} onClick={handleFinishQuestionnaire}>Concluir</Button> {/* Adicione o evento de clique para finalizar o questionário */}
            </Stack>
          ) : (
            <Stack spacing={4}>
              <Text textAlign="center" fontSize={40} color={'green.900'} mb={10}>
                {questions[currentQuestionIndex].question}
              </Text>
              {currentQuestionIndex === 1 ? (
                <>
                  <input
                    type="text"
                    placeholder="Digite o nome do componente"
                    value={answers[currentQuestionIndex] || ''}
                    onChange={(e) => {
                      const inputText = e.target.value;
                      if (inputText.length <= 50) {
                        setAnswers({ ...answers, [currentQuestionIndex]: inputText });
                      }
                    }}
                    style={{
                      padding: '0.5rem',
                      fontSize: '1rem',
                      border: '1px solid #CBD5E0',
                      borderRadius: '0.25rem',
                      outline: 'none',
                      marginRight: '0.5rem',
                    }}
                  />
                  <span>{`${(answers[currentQuestionIndex] || '').length}/50 caracteres`}</span>
                  <Button
                    onClick={() => handleAnswer(answers[currentQuestionIndex] || '')}
                    mt={2}
                    bg={'green.900'}
                    color={'whitesmoke'}
                  >
                    Confirmar
                  </Button>
                </>
              ) : currentQuestionIndex === 2 ? (
                <>
                  <Button bg={'green.900'} color={'white'} onClick={() => handleAnswer('Semi-Novo')}>Semi-Novo</Button>
                  <Button bg={'green.900'} color={'white'} onClick={() => handleAnswer('Desgastado')}>Desgastado</Button>
                  <Button bg={'green.900'} color={'white'} onClick={() => handleAnswer('Quebrado')}>Quebrado</Button>
                  <Button bg={'green.900'} color={'white'} onClick={() => handleAnswer('Sucata')}>Sucata</Button>
                </>
              ) : currentQuestionIndex === 3 ? (
                // Styling for the input element with character count and a separate Confirm button for the fourth question
                <>
                  <input
                    type="text"
                    placeholder="Ex: Danificado no conector, diagnóstico apontou...                    "
                    value={answers[currentQuestionIndex] || ''}
                    onChange={(e) => {
                      const inputText = e.target.value;
                      if (inputText.length <= 400) {
                        setAnswers({ ...answers, [currentQuestionIndex]: inputText });
                      }
                    }}
                    style={{
                      padding: '0.5rem',
                      fontSize: '1rem',
                      border: '1px solid #CBD5E0',
                      borderRadius: '0.25rem',
                      outline: 'none',
                      marginRight: '0.5rem',
                    }}
                  />
                  <span>{`${(answers[currentQuestionIndex] || '').length}/400 caracteres`}</span>
                  <Button
                    onClick={() => handleAnswer(answers[currentQuestionIndex] || '')}
                    mt={2}
                    bg={'green.900'}
                    color={'whitesmoke'}
                  >
                    Confirmar
                  </Button>
                </>
              ) : currentQuestionIndex === 4 ? (
                // Adição da lógica para a pergunta 4 (fotos)
                <>
                  <div {...getRootProps()} style={{ textAlign: 'center', padding: '1rem', border: '2px dashed #CBD5E0', borderRadius: '0.25rem' }}>
                    <input
                      {...getInputProps()}
                      onChange={(event) => {
                        const files = event.target.files;
                        //@ts-ignore
                        const filesWithBase64 = Array.from(files).map(file => ({
                          path: file.name,
                          base64: URL.createObjectURL(file)
                        }));
                        //@ts-ignore
                        setAcceptedFiles(filesWithBase64);
                      }}
                    />
                    <p>Arraste e solte algumas fotos aqui ou clique para selecionar.</p>
                    {acceptedFiles.length > 0 && (
                      <p>{`Fotos adicionadas: ${acceptedFiles.length}`}</p>
                    )}
                  </div>
                  <Button
                    onClick={() => handleAnswer(acceptedFiles)}
                    mt={2}
                    bg={'green.900'}
                    color={'whitesmoke'}
                    disabled={acceptedFiles.length === 0}
                  >
                    Confirmar
                  </Button>
                </>
              ) : currentQuestionIndex === 5 ? (
                <>
                  {acceptedFiles.length > 0 && (
                    <div style={{ textAlign: 'center', justifyContent: 'center', marginTop: '20px' }}>
                      <img
                        src={URL.createObjectURL(acceptedFiles[0])}
                        alt="Imagem Principal"
                        style={{ maxWidth: '80%', maxHeight: '400px', objectFit: 'cover', margin: 'auto' }}
                      />
                      <Text textAlign="center">Foto Principal</Text>
                    </div>
                  )}
                  <div style={{ display: 'flex', overflowX: 'auto', overflowY: 'hidden', whiteSpace: 'nowrap', width: '100%', height: 'auto' }}>
                    {acceptedFiles.map((file, index) => (
                      <div key={index} style={{ margin: '5px', position: 'relative', minWidth: '200px', height: '100%' }}>
                        <img
                          src={URL.createObjectURL(file)}
                          alt={`Imagem ${index}`}
                          style={{ width: '100%', height: 'auto', objectFit: 'cover', cursor: 'pointer' }}
                          onClick={() => handleImageClick(index)}
                        />
                        <Button onClick={() => handleDeleteImage(index)} style={{ position: 'absolute', top: '5px', right: '5px' }}>
                          <DeleteIcon />
                        </Button>
                        <Button onClick={() => handleEditImage(index)} style={{ position: 'absolute', bottom: '5px', right: '5px' }}>
                          <EditIcon />
                        </Button>
                      </div>
                    ))}
                  </div>
                  <Button
                    onClick={() => handleAnswer(answers[currentQuestionIndex] || '')} // Continuar para a próxima pergunta
                    mt={5}
                    bg={'green.900'}
                    color={'whitesmoke'}
                  >
                    Continuar
                  </Button>
                </>
              ) : currentQuestionIndex === 6 ? (
                // Nova pergunta para verificar as informações
                <>
                  <Stack spacing={4} color={'green.900'}>
                    <div style={{ display:'inline-flex', overflowX: 'auto', whiteSpace: 'nowrap' }}>
                      {acceptedFiles.map((file, index) => (
                        <img
                          key={index}
                          src={URL.createObjectURL(file)}
                          alt={`Imagem ${index}`}
                          style={{ width: '200px', height: '200px', objectFit: 'cover', margin: '5px' }}
                        />
                      ))}
                    </div>
                    <Text><strong>Nome do componente:</strong> {answers[1]}</Text>
                    <Text><strong>Condição do componente:</strong> {answers[2]}</Text>
                    <Text><strong>Descrição do estado:</strong> {answers[3]}</Text>
                  </Stack>
                  <Button
                    onClick={sendMail} // Altere para chamar a função sendMail
                    mt={5}
                    bg={'green.900'}
                    color={'whitesmoke'}
                  >
                    Finalizar
                  </Button>
                </>
              ) : (
                <>
                  <Button bg={'green.900'} color={'white'} onClick={() => handleAnswer('Motor e/ou Componentes')}>Motor e/ou Componentes</Button>
                  <Button bg={'green.900'} color={'white'} onClick={() => handleAnswer('Eletrônica')}>Eletrônica</Button>
                  <Button bg={'green.900'} color={'white'} onClick={() => handleAnswer('Demais Itens')}>Demais Itens</Button>
                </>
              )}
            </Stack>
          )}
          {!isComplete && !isFirstQuestion && (
            <Button
              onClick={() => handleBack()} // Adicione parênteses para invocar a função
              mb={4}
              mt={5}
              bg={'green.900'}
              color={'whitesmoke'}
            >
              Voltar
            </Button>
          )}
        </Container>
      </Box>
    </>
  );
};

export default Questionnaire;
